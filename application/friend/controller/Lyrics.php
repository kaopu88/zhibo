<?php
/**
 * Created by PhpStorm.
 * User: “崔鹏
 * Date: 2020/07/20
 * Time: 上午 10:32
 */

namespace app\friend\controller;
use app\admin\service\SysConfig;
use app\friend\service\FriendCircleAuthor;
use app\friend\service\FriendCircleClassfiy;
use app\friend\service\FriendCircleLyric;
use app\friend\service\FriendCircleMessage;
use bxkj_common\RedisClient;
use think\Db;
use think\facade\Request;

class Lyrics extends Controller
{
    public function __construct()
    {
        parent::__construct();
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //读取config配置
        $redis       = new RedisClient();
        $cacheFriend = $redis->exists('cache:friend_config');
        if (empty($cacheFriend)) {
            $arr  = [];
            $ser  = new SysConfig();
            $info = $ser->getConfig("friend");
            if (empty($info)) return [];
            $redis->setex('cache:friend_config', 4 * 3600, $info['value']);
        }
        $friendConfigRes       = $redis->get('cache:friend_config');
        $this->friendConfigRes = json_decode($friendConfigRes, true);
    }

    public function index()
    {
        $this->checkAuth('friend:Report:index');
        $get         = input();
        $msgCommentR = new  FriendCircleLyric();
        $total       = $msgCommentR->getTotal($get);
        $page        = $this->pageshow($total);
        $list        = $msgCommentR->getList($get, $page->firstRow, $page->listRows);
        $classfiy    = new  FriendCircleClassfiy();
        $rest        = $classfiy->getQuery(['isdel' => 0, 'status' => 1, 'masterid' => 5], "*", 'id');
        foreach ($rest as $k => $v) {
            $earry[]                    = [
                'name'  => $v['child_name'],
                'value' => $v['id'],
            ];
            $arrayClass[$v['id']] = $v['child_name'];
        }

        foreach ($list as $k1 => $v1) {
            $list[$k1]['classfiy'] = $arrayClass[$v1['type']];
            $list[$k1]['lyricsarray'] = unserialize($v1['lyrics']);
        }

        $this->assign('_erarry', json_encode($earry));
        $this->assign('_list', $list);

        return $this->fetch();
    }

    public function add()
    {
        $this->checkAuth('friend:friend:add');
        if (Request::isGet()) {
            $info = [];
            $get  = input();
            $classfiy    = new  FriendCircleClassfiy();
            $rest        = $classfiy->getQuery(['isdel' => 0, 'status' => 1, 'masterid' => 5], "*", 'id');
            foreach ($rest as $k => $v) {
                $earry[]                    = [
                    'name'  => $v['child_name'],
                    'value' => $v['id'],
                ];
                $arrayClass[$v['id']] = $v['child_name'];
            }

            if ($get['pcat_id'] != '') $info['pcat_id'] = $get['pcat_id'];
            if ($get['cat_id'] != '') $info['cat_id'] = $get['cat_id'];
            $author = new FriendCircleAuthor();
            $restAuthor = $author->getQuery(['status'=>1], "*", 'id desc');
            $this->assign('restAuthor', $restAuthor);
            $this->assign('_erarry', $earry);
            $this->assign('_info', $info);
            return $this->fetch();
        } else {
            $friendLyric = new FriendCircleLyric();
            $post   = input();
            $result = $friendLyric->backstageadd($post);
            if ($result==-1) $this->error('已经有了相同的标题');
            alog("friend.lyrics.add", "新增歌词 ID：".$result);
            $this->success('新增成功', $result);
        }
    }

    public function edit()
    {
        if (Request::isGet()) {
            $id   = input('id');
            $info = Db::name('friend_circle_lyrics')->where('id', $id)->find();
            if (empty($info)) $this->error('信息不存在');
            $classfiy    = new  FriendCircleClassfiy();
            $rest        = $classfiy->getQuery(['isdel' => 0, 'status' => 1, 'masterid' => 5], "*", 'id');
            foreach ($rest as $k => $v) {
                $earry[]                    = [
                    'name'  => $v['child_name'],
                    'value' => $v['id'],
                ];
                $arrayClass[$v['id']] = $v['child_name'];
            }
            $author = new FriendCircleAuthor();
            $restAuthor = $author->getQuery(['status'=>1], "*", 'id desc');
            $this->assign('restAuthor', $restAuthor);
            $this->assign('_erarry', $earry);
            $this->assign('lyricsarray', unserialize($info['lyrics']));
            $this->assign('_info', $info);
            return $this->fetch();
        } else {
            $friend = new FriendCircleLyric();
            $post   = input();
            $result = $friend->backstageedit($post);
            if (!$result) $this->error($friend->getError());
            alog("friend.lyrics.edit", "编辑歌词 ID：".$post['id']);
            $this->success('修改成功', $result);
        }
    }

    public function change_status()
    {
        $this->checkAuth('friend:Lyrics:change_status');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $status = input('status');
        if (!in_array($status, ['0', '1'])) $this->error('状态值不正确');
        $friendnlyric = new FriendCircleLyric();
        $num        = $friendnlyric->changeStatus($ids, $status);
        if (!$num) $this->error('切换状态失败');
        alog("friend.lyrics.edit", "编辑歌词 ID：".implode(",", $ids)."<br>修改状态".($status == 1 ? "启用" : "禁用"));
        $this->success('切换成功');
    }


    public function del()
    {
        $this->checkAuth('friend:friend:delete');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $lyric = new FriendCircleLyric();
        $num    = $lyric->del($ids);
        if (!$num) $this->error('删除失败');
        alog("friend.lyrics.del", "删除歌词 ID：".implode(",", $ids));
        $this->success("删除成功，共计删除{$num}条记录");
    }

    public function change_hot()
    {
        $this->checkAuth('friend:Lyrics:change_hot');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $status = input('ishot');
        if (!in_array($status, ['0', '1'])) $this->error('状态值不正确');
        $friendlyric = new FriendCircleLyric();
        $num        = $friendlyric->changehot($ids, $status);
        if (!$num) $this->error('切换状态失败');
        alog("friend.lyrics.edit", "编辑歌词 ID：".implode(",", $ids)."<br>修改热门状态".($status == 1 ? "热门" : "禁用"));
        $this->success('切换成功');
    }
}