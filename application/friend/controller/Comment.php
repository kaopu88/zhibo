<?php
/**
 * Created by PhpStorm.
 * User: “崔鹏
 * Date: 2020/06/20
 * Time:  下午 16:45
 */

namespace app\friend\controller;

use app\admin\service\SysConfig;
use app\admin\service\Work;
use app\friend\service\FriendCircleComment;
use app\friend\service\FriendCircleMessage;
use app\friend\service\FriendCircleTimelin;
use bxkj_common\RedisClient;
use bxkj_module\service\Tree;
use think\Db;
use think\facade\Request;

class Comment extends Controller
{
    public function __construct()
    {
        parent::__construct();
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //读取config配置
        $redis       = new RedisClient();
        $cacheFriend = $redis->exists('cache:friend_config');
        if (empty($cacheFriend)) {
            $arr  = [];
            $ser  = new SysConfig();
            $info = $ser->getConfig("friend");
            if (empty($info)) return [];
            $redis->setex('cache:friend_config', 4 * 3600, $info['value']);
        }
        $friendConfigRes       = $redis->get('cache:friend_config');
        $this->friendConfigRes = json_decode($friendConfigRes, true);
    }

    public function index()
    {
        $this->checkAuth('friend:Comment:index');
        $get        = input();
        $msgComment = new FriendCircleComment();
        $total      = $msgComment->getTotal($get);
        $page       = $this->pageshow($total);
        $list       = $msgComment->getList($get, $page->firstRow, $page->listRows);
        $earry = [['name' => '待审核', 'value' => 0],
            ['name' => '已通过', 'value' => 1],
        ];
        $this->assign('_earry', json_encode($earry));
        $this->assign('_list', $list);
        return $this->fetch();
    }

    public function del()
    {
        $this->checkAuth('friend:friend:delete');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $msgComment = new FriendCircleComment();
        $num        = $msgComment->delids($ids);
        if (!$num) $this->error('删除失败');
        alog("friend.comment.del", "删除信息评论 ID：".implode(",", $ids));
        $count = count($ids);
        $this->success("删除成功，共计删除{$count}条记录");
    }

    public function add()
    {
        $this->checkAuth('friend:comment:add');
        if (Request::isGet()) {
            $info = [];
            $get  = input();
            if ($get['pcat_id'] != '') $info['pcat_id'] = $get['pcat_id'];
            if ($get['cat_id'] != '') $info['cat_id'] = $get['cat_id'];
            $this->assign('_info', $info);
            return $this->fetch();
        } else {
            $msgComment = new FriendCircleComment();
            $post       = input();
            if (!checkImgLength($post['images'], $this->friendConfigRes['comment_img_length'])) {
                $this->error('图片张数超过系统限制');
            };
            $result = $msgComment->backstageadd($post);
            if (!$result) $this->error($msgComment->getError());
            alog("friend.comment.add", "新增信息评论 ID：".$result);
            $this->success('新增成功', $result);
        }
    }

    public function edit()
    {
        if (Request::isGet()) {
            $id   = input('id');
            $info = Db::name('friend_circle_comment')->where('id', $id)->find();
            if (empty($info)) $this->error('信息不存在');
            $this->assign('_info', $info);
            return $this->fetch('add');
        } else {
            $msgComment = new FriendCircleComment();
            $post       = input();
            if (!checkImgLength($post['images'], $this->friendConfigRes['comment_img_length'])) {
                $this->error('图片张数超过系统限制');
            };
            $result = $msgComment->backstageedit($post);
            if (!$result) $this->error($msgComment->getError());
            alog("friend.comment.edit", "编辑信息评论 ID：".$post['id']);
            $this->success('修改成功', $result);
        }
    }

    public function change_status()
    {
        $this->checkAuth('friend:comment:change_status');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $status = input('status');
        if (!in_array($status, ['0', '1'])) $this->error('状态值不正确');
        $msgComment = new FriendCircleComment();
        $num        = $msgComment->changeStatus($ids, $status);
        if (!$num) $this->error('切换状态失败');
        alog("friend.comment.edit", "编辑信息评论 ID：".implode(",", $ids)."<br>修改状态".($status == 1 ? "启用" : "禁用"));
        $this->success('切换成功');
    }
   //评论审核
    public function commentExamine(){
        $this->checkAuth('friend:comment:commentExamine');
        $get = input();
        $get['aid'] = AID;
        if ($get['audit_status'] == '0') {
            Work::read(AID, 'friend_comment_verified');
        }

        $get        = input();
        $get['status'] = 0;
        $msgComment = new FriendCircleComment();
        $total      = $msgComment->getTotal($get);
        $page       = $this->pageshow($total);
        $list       = $msgComment->getList($get, $page->firstRow, $page->listRows);
        $this->assign('_list', $list);
        return $this->fetch();
    }

    public function batch_pass(){
        $this->checkAuth('friend:comment:change_status');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $status = 1;
        if (!in_array($status, ['0', '1'])) $this->error('状态值不正确');
        $msgComment = new FriendCircleComment();
        $num        = $msgComment->changeStatus($ids, $status);
        if (!$num) $this->error('切换状态失败');
        alog("friend.comment.edit", "编辑信息评论 ID：".implode(",", $ids)."<br>修改状态".($status == 1 ? "启用" : "禁用"));
        $this->success('切换成功');
    }
}