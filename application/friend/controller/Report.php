<?php
/**
 * Created by PhpStorm.
 * User: “崔鹏
 * Date: 2020/06/24
 * Time:  下午 16:56
 */

namespace app\friend\controller;

use app\admin\service\SysConfig;
use app\friend\service\FriendCircleClassfiy;
use app\friend\service\FriendCircleCommentEvaluate;
use app\friend\service\FriendCircleMessageReport;
use bxkj_common\RedisClient;
use think\Db;
use think\facade\Request;

class Report extends Controller
{
    public function __construct()
    {
        parent::__construct();
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //读取config配置
        $redis       = new RedisClient();
        $cacheFriend = $redis->exists('cache:friend_config');
        if (empty($cacheFriend)) {
            $arr  = [];
            $ser  = new SysConfig();
            $info = $ser->getConfig("friend");
            if (empty($info)) return [];
            $redis->setex('cache:friend_config', 4 * 3600, $info['value']);
        }
        $friendConfigRes       = $redis->get('cache:friend_config');
        $this->friendConfigRes = json_decode($friendConfigRes, true);
    }

    public function index()
    {
        $this->checkAuth('friend:Report:index');
        $get         = input();
        $msgCommentR = new  FriendCircleMessageReport();
        $total       = $msgCommentR->getTotal($get);
        $page        = $this->pageshow($total);
        $list        = $msgCommentR->getList($get, $page->firstRow, $page->listRows);
        $classfiy    = new FriendCircleClassfiy();
        $rest        = $classfiy->getQuery(['isdel' => 0, 'status' => 1, 'masterid' => 4], "*", 'id');
        foreach ($rest as $k => $v) {
            $earry[]              = [
                'name'  => $v['child_name'],
                'value' => $v['id'],
            ];
            $arrayClass[$v['id']] = $v['child_name'];
        }
        $report_type = [
          '0'=>'举报人',
          '2'=>'动态',
          '3'=>'圈子',
          '6'=>'表白',
          '7'=>'评论',
          '8'=>'留言',
          '9'=>'举报人',

        ];
        foreach ($list as $k1 => $v1) {
            $reportArray = explode(',', trim($v1['type'], ','));
            array_filter($reportArray);
            foreach ($reportArray as $k2 => $v2) {
                $report                = $list[$k1]['classfiy'] . ',' . $arrayClass[$v2];
                $list[$k1]['classfiy'] = trim($report, ',');
            }
            $list[$k1]['report_type'] = $report_type[$v1['report_type']];
        }
        $this->assign('_erarry', json_encode($earry));
        $this->assign('_report_type', $report_type);
        $this->assign('_list', $list);
        return $this->fetch();
    }

    public function del()
    {
        $this->checkAuth('friend:Report:delete');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $msgComment = new FriendCircleMessageReport();
        $num        = $msgComment->del($ids);
        if (!$num) $this->error('删除失败');
        alog("friend.report.del", "删除举报记录 ID：" . implode(",", $ids));
        $count = count($ids);
        $this->success("删除成功，共计删除{$count}条记录");
    }

    public function edit()
    {
        if (Request::isGet()) {
            $id   = input('id');
            $info = Db::name('friend_circle_message_report')->where('id', $id)->find();
            if (empty($info)) $this->error('信息不存在');
            $classfiy = new FriendCircleClassfiy();
            $rest     = $classfiy->getQuery(['isdel' => 0, 'status' => 1, 'masterid' => 4], "*", 'id');
            foreach ($rest as $k => $v) {
                $earry[]              = [
                    'name'  => $v['child_name'],
                    'value' => $v['id'],
                ];
                $arrayClass[$v['id']] = $v['child_name'];
            }
            $this->assign('_report_type', $earry);
            $this->assign('_info', $info);
            return $this->fetch('edit');
        } else {
            $msgComment = new FriendCircleMessageReport();
            $post       = input();
            $result     = $msgComment->backstageedit($post);
            if (!$result) $this->error($msgComment->getError());
            alog("friend.report.edit", "编辑举报记录 ID：" . $post['id']);
            $this->success('修改成功', $result);
        }
    }


    public function handler()
    {
        $this->checkAuth('admin:report:audit');
        $post = Request::post();
        if (empty($post['id'])) $this->error('请选择申请记录');
        $msgComment = new FriendCircleMessageReport();
        $result = $msgComment->handler_report($post);
      if (!$result) return $this->error($msgComment->getError());
        alog("manager.complaint.edit", '编辑举报类型 ID：'.$post['id']);
        $this->success('处理成功');
    }
}