<?php
/**
 * Created by PhpStorm.
 * User: “崔鹏
 * Date: 2020/06/16
 * Time: 上午 9:45
 */

namespace app\friend\controller;

use app\admin\service\SysConfig;
use app\admin\service\Video;
use app\admin\service\Work;
use app\friend\service\FriendCircleClassfiy;
use app\friend\service\FriendCircleMessage;
use app\friend\service\FriendCircleTimelin;
use bxkj_common\RedisClient;
use bxkj_module\service\Tree;
use think\Db;
use think\facade\Request;

class Friend extends Controller
{
    public function __construct()
    {
        parent::__construct();
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->friend_msg_extend_type  = array(
            array('name' => '综合', 'value' => 1),
            array('name' => '视频', 'value' => 2),
            array('name' => '声音', 'value' => 3),
        );
        $this->friend_msg_report_type  = array(
            array('name' => '动态', 'value' => 2),
            array('name' => '圈子', 'value' => 3),
            array('name' => '表白', 'value' => 6),
            array('name' => '评论', 'value' => 7),
            array('name' => '留言', 'value' => 8),
        );
        $this->friend_msg_types        = array(
            array('name' => '话题', 'value' => 2),
            array('name' => '圈子', 'value' => 3),
            array('name' => '表白', 'value' => 6),
        );
        $this->friend_msg_accept_types = array(
            array('name' => '所有人', 'value' => 1),
            array('name' => '好友', 'value' => 2),
            array('name' => '陌生人', 'value' => 3),
            array('name' => '私密', 'value' => 4),
        );
        //读取config配置
        $redis       = new RedisClient();
        $cacheFriend = $redis->exists('cache:friend_config');
        if (empty($cacheFriend)) {
            $arr  = [];
            $ser  = new SysConfig();
            $info = $ser->getConfig("friend");
            if (empty($info)) return [];
            $redis->setex('cache:friend_config', 4 * 3600, $info['value']);
        }
        $friendConfigRes       = $redis->get('cache:friend_config');
        $this->friendConfigRes = json_decode($friendConfigRes, true);
    }

    public function index()
    {
        $this->checkAuth('friend:friendcircletimeline:index');
        $get      = input();
        $friend   = new FriendCircleMessage();
        $total    = $friend->getTotal($get);
        $page     = $this->pageshow($total);
        $list     = $friend->getList($get, $page->firstRow, $page->listRows);
        $classfiy = new FriendCircleClassfiy();
        $rest     = $classfiy->getQuery(['isdel' => 0, 'status' => 1, 'masterid' => 3], "*", 'id');
        foreach ($rest as $k => $v) {
            $earry[] = [
                'name'  => $v['child_name'],
                'value' => $v['id'],
            ];
        }
        foreach ($list as $k => $v) {
            switch ($v['extend_type']) {
                case 1:
                    $extend = '(综合)';
                    break;
                case  2:
                    $extend = '(视频)';
                    break;
                case  3:
                    if (empty($v['extend_talk'])) {
                        $extend_talk = ':普通';
                    } else {
                        $extend_talk = ':接唱';
                    }
                    $extend = '(音频)' . $extend_talk;
                    break;
            }
            switch ($v['type']) {
                case 1:
                    $list[$k]['sendtype'] = "普通信息";
                    break;
                case 2:
                    $list[$k]['sendtype'] = "话题" . $extend;
                    break;
                case 3:
                    $list[$k]['sendtype'] = "圈子" . $extend;
                    break;
                case 6:
                    $list[$k]['sendtype'] = "表白" . $extend;
                    break;
            }
            switch ($v['msg_type']) {
                case 1:
                    $list[$k]['sendto'] = "所有人";
                    break;
                case 2:
                    $list[$k]['sendto'] = "好友";
                    break;
                case 3:
                    $list[$k]['sendto'] = "陌生人";
                case 4:
                    $list[$k]['sendto'] = "私密";
                    break;
            }
            $list[$k]['user']    = userMsg($v['uid'], 'user_id,nickname,avatar,phone,level,remark_name');
            $list[$k]['picture'] = array_filter(explode(',', $v['picture']));
        }
        $earry = [['name' => '待审核', 'value' => 0],
            ['name' => '已通过', 'value' => 1],
        ];
        $this->assign('_earry', json_encode($earry));
        $this->assign('_extendArray', json_encode(enum_array('friend_msg_extend_type') ? enum_array('friend_msg_extend_type') : $this->friend_msg_extend_type));
        $this->assign('_sendtypeArray', json_encode(enum_array('friend_msg_types') ? enum_array('friend_msg_types') : $this->friend_msg_types));
        $this->assign('_acceptArray', json_encode(enum_array('friend_msg_accept_types') ? enum_array('friend_msg_accept_types') : $this->friend_msg_accept_types));
        $this->assign('_list', $list);
        return $this->fetch();
    }

    public function del()
    {
        $this->checkAuth('friend:friend:delete');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $friend = new FriendCircleMessage();
        $num    = $friend->del($ids);
        if (!$num) $this->error('删除失败');
        alog("friend.friend.del", "删除发布信息 ID：" . implode(",", $ids));
        $count = count($ids);
        $this->success("删除成功，共计删除{$count}条记录");
    }

    public function change_recom()
    {
        $this->checkAuth('friend:friend:change_recom');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $status = input('status');
        if (!in_array($status, ['0', '1'])) $this->error('状态值不正确');
        $friendnMsg = new FriendCircleMessage();
        $num        = $friendnMsg->changeRecom($ids, $status);
        if (!$num) $this->error('切换状态失败');
        alog("friend.friend.edit", "编辑发布信息 ID：" . implode(",", $ids) . "<br>修改推荐状态" . ($status == 1 ? "推荐" : "普通"));
        $this->success('切换成功');
    }

    public function change_status()
    {
        $this->checkAuth('friend:friend:change_status');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $status = input('status');
        if (!in_array($status, ['0', '1'])) $this->error('状态值不正确');
        $friendnMsg = new FriendCircleMessage();
        //这里加个判定，如果是小视频必须满足审核已经通过
        $msgdetail = $friendnMsg->find(['id' => $ids[0]]);
        if ($msgdetail['render_type'] == 20) {
            $systemplus = json_decode($msgdetail['systemplus'], true);
            $videoService = new Video();
            $viedodetail  = $videoService->find(['id' => $systemplus['videoID']]);
            if ($viedodetail['audit_status'] != 2) {
                $this->error('该小视频未通过审核');
            }
        }
        $num = $friendnMsg->changeStatus($ids, $status);
        if (!$num) $this->error('切换状态失败');
        alog("friend.friend.edit", "编辑发布信息 ID：" . implode(",", $ids) . "<br>修改状态" . ($status == 1 ? "启用" : "禁用"));
        $this->success('切换成功');
    }

    public function add()
    {
        $this->checkAuth('friend:friend:add');
        if (Request::isGet()) {
            $info = [];
            $get  = input();
            if ($get['pcat_id'] != '') $info['pcat_id'] = $get['pcat_id'];
            if ($get['cat_id'] != '') $info['cat_id'] = $get['cat_id'];
            $this->assign('friend_msg_types',  $this->friend_msg_types );
            $this->assign('friend_msg_extend_type',  $this->friend_msg_extend_type );
            $this->assign('_info', $info);
            return $this->fetch();
        } else {
            $friend = new FriendCircleMessage();
            $post   = input();
            if($post['comment_num']>100000000){
                $this->error('评论数字不能太大');
            }
            if($post['like_num']>100000000){
                $this->error('点赞数字不能太大');
            }
            if (!checkImgLength($post['images'], $this->friendConfigRes['msg_img_length'])) {
                $this->error('图片张数超过系统限制');
            };
            $result = $friend->backstageadd($post);
            if (!$result) $this->error($friend->getError());
            alog("friend.friend.add", "新增发布信息 ID：" . $result);
            $this->success('新增成功', $result);
        }
    }

    public function edit()
    {
        if (Request::isGet()) {
            $id   = input('id');
            $info = Db::name('friend_circle_message')->where('id', $id)->find();
            if (empty($info)) $this->error('信息不存在');
            $this->assign('_info', $info);
            $this->assign('friend_msg_types',  $this->friend_msg_types );
            $this->assign('friend_msg_extend_type',  $this->friend_msg_extend_type );

            return $this->fetch('add');
        } else {
            $friend = new FriendCircleMessage();
            $post   = input();
            if($post['comment_num']>100000000){
                $this->error('评论数字不能太大');
            }
            if($post['like_num']>100000000){
                $this->error('点赞数字不能太大');
            }
            if (!checkImgLength($post['images'], $this->friendConfigRes['msg_img_length'])) {
                $this->error('图片张数超过系统限制');
            };
            $result = $friend->backstageedit($post);
            if (!$result) $this->error($friend->getError());

            alog("friend.friend.edit", "编辑发布信息 ID：" . $post['id']);
            $this->success('修改成功', $result);
        }
    }

    public function tcplayer()
    {
        $id   = input('id');
        $type = input('type');
        if ($type == 'film_ad') {
            $info = Db::name('friend_circle_message')->field('title,video')->where('id', $id)->find();
        } else {
            $info = Db::name('friend_circle_message')->field('title,video')->where('id', $id)->find();
        }
        if (empty($info)) $this->error('视频不存在');
        $this->assign('film', $info);
        return $this->fetch();
    }

    public function msgExamine()
    {
        $this->checkAuth('friend:friend:msgExamine');
        $get        = input();
        $get['aid'] = AID;
        if ($get['audit_status'] == '0') {
            Work::read(AID, 'friend_verified');
        }
        $get           = input();
        $friend        = new FriendCircleMessage();
        $get['status'] = 0;
        $total         = $friend->getTotal($get);
        $page          = $this->pageshow($total);
        $list          = $friend->getList($get, $page->firstRow, $page->listRows);
        //   $this->assign('_acceptArray', json_encode($earry));
        foreach ($list as $k => $v) {
            $list[$k]['user']    = userMsg($v['uid'], 'user_id,nickname,avatar,phone,level,remark_name');
            $list[$k]['picture'] = array_filter(explode(',', $v['picture']));
        }
        $this->assign('_list', $list);
        $this->assign('get', $get);
        return $this->fetch();
    }

    public function batch_pass()
    {
        $this->checkAuth('friend:friend:change_status');
        $ids = get_request_ids();
        if (empty($ids)) $this->error('请选择记录');
        $status = 1;
        if (!in_array($status, ['0', '1'])) $this->error('状态值不正确');
        $friendnMsg = new FriendCircleMessage();
        $num        = $friendnMsg->changeStatus($ids, $status);
        if (!$num) $this->error('切换状态失败');
        alog("friend.friend.edit", "编辑发布信息 ID：" . implode(",", $ids) . "<br>修改状态" . ($status == 1 ? "启用" : "禁用"));
        $this->success('切换成功');
    }
}