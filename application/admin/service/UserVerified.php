<?phpnamespace app\admin\service;use bxkj_module\service\Service;use think\Db;use bxkj_common\CoreSdk;class UserVerified extends Service{    protected static $sex = ['保密', '男', '女'];    protected static $idcard_type = ['SFZ' => '身份证', 'HZ' => '护照', 'TXZ' => '港澳居民来往内地通行证', 'TW' => '台湾居民来往大陆通行证', 'WAIGUOREN' => '外国人永久居留身份证', 'HKMOJUMIN' => '港澳台居民居住证'];    public function getTotal($get)    {        $this->db = Db::name('user_verified');        $this->setWhere($get);        return $this->db->count();    }    public function setWhere($get)    {        $where = array();        if ($get['status'] != '') {            $where[] = ['status', '=', $get['status']];        }        if (trim($get['user_id']) != '') {            $where[] = ['user_id', '=', trim($get['user_id'])];        }        if (trim($get['aid']) != '') {            $where[] = ['aid', '=', trim($get['aid'])];        }        $this->db->where($where);        return $this;    }    public function setOrder()    {        $order = array();        //$order['status'] = 'asc';        $order['create_time'] = 'desc';        $this->db->order($order);        return $this;    }    public function getList($get, $offset, $lenth)    {        $this->db = Db::name('user_verified');        $this->setWhere($get)->setOrder($get);        $result = $this->db->limit($offset, $lenth)->select();        $result = $result ? $result : [];        $this->parseList($result);        return $result;    }    public function parseList(&$result)    {        $relKey = 'user_id';        $outKey = 'user';        $recAccounts = $this->getRelList($result, [new User(), 'getUsersByIds'], 'user_id');        $auditAdmins = [];        if (empty($get['aid'])) {            $auditAids = self::getIdsByList($result, 'aid');            $auditAdmins = $auditAids ? Db::name('admin')->whereIn('id', $auditAids)->select() : [];        }        foreach ($result as &$item) {            if (!empty($item['user_id'])) {                $item[$outKey] = self::getItemByList($item['user_id'], $recAccounts, $relKey);            }            $item['sex_str'] = self::$sex[$item['sex']];            if ($item['idcard_type']) {                $item['idcard_type_str'] = self::$idcard_type[$item['idcard_type']];            } else {                $item['idcard_type_str'] = '身份证';            }            if (empty($get['aid']) && !empty($item['aid'])) {                $item['audit_admin'] = self::getItemByList($item['aid'], $auditAdmins);            }        }    }    public function handler($inputData, $aid = null)    {        $status = $inputData['status'];        $where = [['id', '=', $inputData['id']]];        if (isset($aid)) $where[] = ['aid', '=', $aid];        Service::startTrans();        $order = Db::name('user_verified')->where($where)->find();        if (empty($order)) return $this->setError('申请记录不存在');        if ($order['status'] != '0') return $this->setError('审核状态不正确');        if (!in_array($status, ['1', '2'])) return $this->setError('处理状态不正确');        if ($status == '2' && empty($inputData['handle_desc'])) return $this->setError('请填写备注信息');        $update = ['handle_time' => time(), 'status' => $status];        $update['handle_desc'] = $inputData['handle_desc'] ? $inputData['handle_desc'] : '';        $num = Db::name('user_verified')->where('id', $order['id'])->update($update);        if (!$num) return $this->setError('处理失败');        if ($status == '1') {            //申请主播的实名操作            $res = $this->anchorHandler($order['user_id']);            if ($res['code'] != 200) return $this->setError($res['msg']);        }        $verified = $status == '1' ? '1' : '3';        Db::name('user')->where('user_id', $order['user_id'])->update(array('verified' => $verified));        $core = new CoreSdk();        $core->post('user/update_redis', array(            'user_id' => $order['user_id'],            'verified' => $verified        ));        Service::commit();        return array_merge($order, $update);    }    /**     * 针对是否是成为主播的后续操作     */    public function anchorHandler($userId = '')    {        if (empty($userId)) return ['code' => 101, 'msg' => '用户ID不存在'];        $live_setting = config('app.live_setting.user_live');        $anchorApply = Db::name('anchor_apply')->where(['user_id' => $userId, 'status' => 1])->find();        if (empty($anchorApply)) return ['code' => 200];        if (empty($anchorApply['agent_id'])) {            if ($live_setting['verify']) {                //表明是需要平台审核                $data['status'] = 3;            } else {                $anchorService = new \app\admin\service\Anchor();                $res = $anchorService->create([                    'agent_id' => $anchorApply['agent_id'],                    'user_id' => $anchorApply['user_id'],                    'force' => 0,                    'admin' => [                        'type' => 'erp',                        'id' => AID                    ]], 1);                if (!$res) return ['code' => 103, 'msg' => $anchorService->getError()];                $data['status'] = 2;            }            Db::name('anchor_apply')->where(['id' => $anchorApply['id']])->update($data);            return ['code' => 200];        } else {            //移交到公会审核主播            $agent = Db::name('agent')->where(['id' => $anchorApply['agent_id'], 'delete_time' => null])->find();            if (empty($agent)) return ['code' => 104, 'msg' => '公会不存在'];            $data['status'] = 4;            Db::name('anchor_apply')->where(['id' => $anchorApply['id']])->update($data);            return ['code' => 200];        }    }}